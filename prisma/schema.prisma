// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js" //If you want to use TypeScript, use "prisma-client-ts"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode = "prisma"
}


model Blog {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    lastRSSUpdatedAt DateTime
    title     String
    description   String @db.Text
    url       String   @unique
    rss       String
    image    String @db.Text
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    draft   Boolean @default(true)
    articles Article[]

    @@index([userId])
}

model Article {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    description   String @db.Text
    url       String   @unique
    image    String @db.Text
    publishedAt DateTime
    blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
    blogId    String

    @@index([blogId])
}

model GithubRepo {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    description String @db.Text
    url       String   @unique
    owner     String
    stars     Int
    forks     Int
    issues    Int
    language  String
    topics    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    draft     Boolean @default(true)

    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    refresh_token_expires_in Int?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    githubRepos   GithubRepo[]
    blogs         Blog[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
